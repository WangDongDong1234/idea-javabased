git init 初始化

项目签名（两种方式,两个有一个，作用是区分不同开发者的身份）
    系统项目级别
    git config user.name 用户名
    git config user.email 邮箱
    系统项目级别的配置保存再: ./.git/config文件下
    系统用户级别
    git config --global user.name 用户名
    git config --global user.email 邮箱    
    系统用户级别的配置保存在$ cat ~/.gitconfig

git status 查看状态（git add,git commit,git ）
git add
git rm --cached  在提交到本地库的时候，有后悔的余地（删除缓存中的文件）
git commit(直接这样的话会进入文本编辑器)  可以使用git commit -m "My second commit,modify 1" 1
git log 查看提交记录    空格向下翻页，b向上翻页，q退出
git log --pretty=oneline  以一个漂亮的格式来显示  或者是git log --oneline

git reflog  显示前进后退移动的指针个数
版本的前进和后退
基于索引值操作  git reset --hard [局部索引值]（结合git log --oneline使用）
git reset --hard HEAD^ (结合 git reflog使用)   （--hard,--soft,--mixed）
git reset --hard HEAD~n (结合 git reflog使用)

删除：前提是已经将文件提交到本地库（理解）
tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ rm 1.txt       删除工作区的1.txt

tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ git status     查看状态
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    1.txt

no changes added to commit (use "git add" and/or "git commit -a")

tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ git add 1.txt  删除缓存去的1.txt

tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ git status      查看状态
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        deleted:    1.txt


tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ git commit -m "delete 1.txt" 1.txt   #向本地库提交删除的信息
[master eeb7e36] delete 1.txt
 1 file changed, 223 deletions(-)
 delete mode 100644 1.txt

tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$ git log --oneline
eeb7e36 (HEAD -> master) delete 1.txt
dd495e5 first test,increase 3line

tianyhe@DESKTOP-6FOTALP MINGW64 /d/wdd-tools/gitworkspace/wechat (master)
$
-----------------------------------------
删除文件并找回：git reset --hard 指针位置
      删除操作已经提交到本地库：指针位置指向历史记录
      删除操作尚未提交到本地库：指针位置使用Head(因为，head是当前本地库的最后版本)
      

比较文件差异
	git diff [文件名]  将工作区的文件和暂存区进行比较
 	git diff [本地库历史版本][文件名]   将工作区的文件和本地库历史文件记录比较 

创建分支：git branch [分支名]   删除分支 git branch -D 分支名称
查看分支:  git branch -v
切换分支:  git checkout [分支名]

冲突的解决
	第一步：编辑文件，删除特殊符号
	第二步：把文件修改到满意的程度，保存退出
	第三步：git add 文件名
	第四步: git commit -m ""   //注意不要带文件名

---------------------------------------------------------------
使用github教程
1.岳不群在github账户上创建一个仓库
2.岳不群在客户端创建一个文件夹，进入这个文件夹使用git init命令
3.岳不群文件夹中：
	使用https 拉取库（因为我们不能总是记住地址，所以我们创建远程库地址别名）
	git remote -v 查看当前所有远程地址别名
	git remote add [别名] [远程地址]
4.岳不群文件夹中创建一个文件然后推送： git push [别名][分支名]   作用是将工作空间的提交上去，不用选择文件名
5.令狐冲文件夹直接克隆: 新建一个空间 直接git clone 地址   效果  完整的把远程库下载到本地，创建origin远程地址别名  初始化本地库
6.令狐冲在本地修改，提交到本地库可以，但是不能提交到远程库（因为岳不群没有邀请令狐冲加入这个团队）
7.岳不群在github账户上邀请令狐冲加入这个团队，令狐冲接受
8.令狐冲在次提交，输入令狐冲的账户


拉取 pull=fetch+merge
git fetch [远程库地址别名][远程分支名]   作用是，到远程分支名把文件拉去下来（下载在 远程地址别名/远程分支名  的这个本地分支上），但是并不覆盖当前空间的文件。
git merge [远程库地址别名/远程分支名]   作用是：将拉取下来的文件合并到本地空间上

-----------------------------------------------------------------------------------
使用ssh方式登录
见pdf
--------------------------------------------
使用eclipse

图标显示
文件上？表示没有被追踪
add to index  : 文件上+表示被追踪
                       文件上*表示缓存了
commit :文件上变成金色的圆柱体
----------------------------------
分支实战操作
账号1，yuebuqun:1.（不允许直接在master上改）你要创建一个分支hotfix（顺便切换到这个分支）
	            2.在hotfix上修改，提交到本地库，然后推送到远程（推送的是hotfix分支）


账号2，linghuchong:（我要审查yuebuqun的代码）
	3.拉取（自动拉分支）
	4.切换到拉下的分支（给换分支，审查代码）（只有这个账户的远程有这个hotfix分支，本地没有
                ）
	5.合并，切换回master上，然后merge(选本地的，因为远程的已经拉到本地了)
	6.推送到master分支上


